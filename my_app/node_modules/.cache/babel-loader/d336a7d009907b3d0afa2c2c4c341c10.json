{"ast":null,"code":"var _jsxFileName = \"D:\\\\it-kama\\\\my_app\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching, unfollow } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from '../Common/Preloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 42\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        users: this.props.users,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        onPageChanged: this.onPageChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber));\n//         },\n//         setTotalUsersCount: (totalUsersCount) => {\n//             dispatch(setTotalUsersCountAC(totalUsersCount));\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetchingAC(isFetching))\n//         }\n//     };\n// };\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["D:/it-kama/my_app/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","setCurrentPage","setTotalUsersCount","setUsers","toggleIsFetching","unfollow","axios","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    follow,\n    setCurrentPage,\n    setTotalUsersCount,\n    setUsers, toggleIsFetching,\n    unfollow,\n} from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from '../Common/Preloader';\n\nclass UsersContainer extends React.Component {\n    componentDidMount() {\n        this.props.toggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n            .then((response) => {\n                this.props.toggleIsFetching(false)\n                this.props.setUsers(response.data.items);\n                this.props.setTotalUsersCount(response.data.totalCount);\n            });\n    }\n\n    onPageChanged = (pageNumber) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n            .then((response) => {\n                this.props.toggleIsFetching(false)\n                this.props.setUsers(response.data.items);\n            });\n    };\n\n    render() {\n        return (\n            <>\n                {this.props.isFetching ? <Preloader/> : null}\n                <Users\n                    totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n                    onPageChanged={this.onPageChanged}\n                />\n            </>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n    };\n};\n\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber));\n//         },\n//         setTotalUsersCount: (totalUsersCount) => {\n//             dispatch(setTotalUsersCountAC(totalUsersCount));\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetchingAC(isFetching))\n//         }\n//     };\n// };\n\nexport default connect(mapStateToProps, {\n        follow,\n        unfollow,\n        setUsers,\n        setCurrentPage,\n        setTotalUsersCount,\n        toggleIsFetching\n    }\n)\n(UsersContainer);\n"]},"metadata":{},"sourceType":"module"}